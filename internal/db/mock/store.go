// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/db/sqlc/store.go
//
// Generated by this command:
//
//	mockgen -source ./internal/db/sqlc/store.go -package mockdb -destination internal/db/mock/store.go Store
//
// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	config "github.com/mateoradman/tempus/internal/config"
	sqlc "github.com/mateoradman/tempus/internal/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAbsence mocks base method.
func (m *MockStore) CreateAbsence(ctx context.Context, arg sqlc.CreateAbsenceParams) (sqlc.Absence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAbsence", ctx, arg)
	ret0, _ := ret[0].(sqlc.Absence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAbsence indicates an expected call of CreateAbsence.
func (mr *MockStoreMockRecorder) CreateAbsence(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAbsence", reflect.TypeOf((*MockStore)(nil).CreateAbsence), ctx, arg)
}

// CreateCompany mocks base method.
func (m *MockStore) CreateCompany(ctx context.Context, name string) (sqlc.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, name)
	ret0, _ := ret[0].(sqlc.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockStoreMockRecorder) CreateCompany(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockStore)(nil).CreateCompany), ctx, name)
}

// CreateEntry mocks base method.
func (m *MockStore) CreateEntry(ctx context.Context, arg sqlc.CreateEntryParams) (sqlc.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", ctx, arg)
	ret0, _ := ret[0].(sqlc.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockStoreMockRecorder) CreateEntry(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockStore)(nil).CreateEntry), ctx, arg)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(ctx context.Context, arg sqlc.CreateSessionParams) (sqlc.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, arg)
	ret0, _ := ret[0].(sqlc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), ctx, arg)
}

// CreateTeam mocks base method.
func (m *MockStore) CreateTeam(ctx context.Context, arg sqlc.CreateTeamParams) (sqlc.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", ctx, arg)
	ret0, _ := ret[0].(sqlc.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockStoreMockRecorder) CreateTeam(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockStore)(nil).CreateTeam), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, arg sqlc.CreateUserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, arg)
}

// DeleteAbsence mocks base method.
func (m *MockStore) DeleteAbsence(ctx context.Context, id int64) (sqlc.Absence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAbsence", ctx, id)
	ret0, _ := ret[0].(sqlc.Absence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAbsence indicates an expected call of DeleteAbsence.
func (mr *MockStoreMockRecorder) DeleteAbsence(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAbsence", reflect.TypeOf((*MockStore)(nil).DeleteAbsence), ctx, id)
}

// DeleteCompany mocks base method.
func (m *MockStore) DeleteCompany(ctx context.Context, id int64) (sqlc.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompany", ctx, id)
	ret0, _ := ret[0].(sqlc.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCompany indicates an expected call of DeleteCompany.
func (mr *MockStoreMockRecorder) DeleteCompany(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompany", reflect.TypeOf((*MockStore)(nil).DeleteCompany), ctx, id)
}

// DeleteEntry mocks base method.
func (m *MockStore) DeleteEntry(ctx context.Context, id int64) (sqlc.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntry", ctx, id)
	ret0, _ := ret[0].(sqlc.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntry indicates an expected call of DeleteEntry.
func (mr *MockStoreMockRecorder) DeleteEntry(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntry", reflect.TypeOf((*MockStore)(nil).DeleteEntry), ctx, id)
}

// DeleteTeam mocks base method.
func (m *MockStore) DeleteTeam(ctx context.Context, id int64) (sqlc.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", ctx, id)
	ret0, _ := ret[0].(sqlc.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockStoreMockRecorder) DeleteTeam(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockStore)(nil).DeleteTeam), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(ctx context.Context, id int64) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), ctx, id)
}

// GetAbsence mocks base method.
func (m *MockStore) GetAbsence(ctx context.Context, id int64) (sqlc.Absence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAbsence", ctx, id)
	ret0, _ := ret[0].(sqlc.Absence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAbsence indicates an expected call of GetAbsence.
func (mr *MockStoreMockRecorder) GetAbsence(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAbsence", reflect.TypeOf((*MockStore)(nil).GetAbsence), ctx, id)
}

// GetCompany mocks base method.
func (m *MockStore) GetCompany(ctx context.Context, id int64) (sqlc.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompany", ctx, id)
	ret0, _ := ret[0].(sqlc.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompany indicates an expected call of GetCompany.
func (mr *MockStoreMockRecorder) GetCompany(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompany", reflect.TypeOf((*MockStore)(nil).GetCompany), ctx, id)
}

// GetEntry mocks base method.
func (m *MockStore) GetEntry(ctx context.Context, id int64) (sqlc.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntry", ctx, id)
	ret0, _ := ret[0].(sqlc.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockStoreMockRecorder) GetEntry(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockStore)(nil).GetEntry), ctx, id)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(ctx context.Context, id uuid.UUID) (sqlc.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, id)
	ret0, _ := ret[0].(sqlc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), ctx, id)
}

// GetTeam mocks base method.
func (m *MockStore) GetTeam(ctx context.Context, id int64) (sqlc.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", ctx, id)
	ret0, _ := ret[0].(sqlc.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockStoreMockRecorder) GetTeam(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockStore)(nil).GetTeam), ctx, id)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(ctx context.Context, id int64) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(ctx context.Context, email string) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), ctx, email)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(ctx context.Context, username string) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), ctx, username)
}

// ListAbsences mocks base method.
func (m *MockStore) ListAbsences(ctx context.Context, arg sqlc.ListAbsencesParams) ([]sqlc.Absence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAbsences", ctx, arg)
	ret0, _ := ret[0].([]sqlc.Absence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAbsences indicates an expected call of ListAbsences.
func (mr *MockStoreMockRecorder) ListAbsences(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAbsences", reflect.TypeOf((*MockStore)(nil).ListAbsences), ctx, arg)
}

// ListCompanies mocks base method.
func (m *MockStore) ListCompanies(ctx context.Context, arg sqlc.ListCompaniesParams) ([]sqlc.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompanies", ctx, arg)
	ret0, _ := ret[0].([]sqlc.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompanies indicates an expected call of ListCompanies.
func (mr *MockStoreMockRecorder) ListCompanies(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompanies", reflect.TypeOf((*MockStore)(nil).ListCompanies), ctx, arg)
}

// ListCompanyEmployees mocks base method.
func (m *MockStore) ListCompanyEmployees(ctx context.Context, arg sqlc.ListCompanyEmployeesParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompanyEmployees", ctx, arg)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompanyEmployees indicates an expected call of ListCompanyEmployees.
func (mr *MockStoreMockRecorder) ListCompanyEmployees(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompanyEmployees", reflect.TypeOf((*MockStore)(nil).ListCompanyEmployees), ctx, arg)
}

// ListEntries mocks base method.
func (m *MockStore) ListEntries(ctx context.Context, arg sqlc.ListEntriesParams) ([]sqlc.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntries", ctx, arg)
	ret0, _ := ret[0].([]sqlc.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockStoreMockRecorder) ListEntries(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockStore)(nil).ListEntries), ctx, arg)
}

// ListTeamMembers mocks base method.
func (m *MockStore) ListTeamMembers(ctx context.Context, arg sqlc.ListTeamMembersParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamMembers", ctx, arg)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeamMembers indicates an expected call of ListTeamMembers.
func (mr *MockStoreMockRecorder) ListTeamMembers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamMembers", reflect.TypeOf((*MockStore)(nil).ListTeamMembers), ctx, arg)
}

// ListTeams mocks base method.
func (m *MockStore) ListTeams(ctx context.Context, arg sqlc.ListTeamsParams) ([]sqlc.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", ctx, arg)
	ret0, _ := ret[0].([]sqlc.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockStoreMockRecorder) ListTeams(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockStore)(nil).ListTeams), ctx, arg)
}

// ListUserAbsences mocks base method.
func (m *MockStore) ListUserAbsences(ctx context.Context, arg sqlc.ListUserAbsencesParams) ([]sqlc.Absence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserAbsences", ctx, arg)
	ret0, _ := ret[0].([]sqlc.Absence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserAbsences indicates an expected call of ListUserAbsences.
func (mr *MockStoreMockRecorder) ListUserAbsences(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserAbsences", reflect.TypeOf((*MockStore)(nil).ListUserAbsences), ctx, arg)
}

// ListUserEntries mocks base method.
func (m *MockStore) ListUserEntries(ctx context.Context, arg sqlc.ListUserEntriesParams) ([]sqlc.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserEntries", ctx, arg)
	ret0, _ := ret[0].([]sqlc.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserEntries indicates an expected call of ListUserEntries.
func (mr *MockStoreMockRecorder) ListUserEntries(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserEntries", reflect.TypeOf((*MockStore)(nil).ListUserEntries), ctx, arg)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(ctx context.Context, arg sqlc.ListUsersParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), ctx, arg)
}

// SeedDatabase mocks base method.
func (m *MockStore) SeedDatabase(ctx context.Context, config config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeedDatabase", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeedDatabase indicates an expected call of SeedDatabase.
func (mr *MockStoreMockRecorder) SeedDatabase(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedDatabase", reflect.TypeOf((*MockStore)(nil).SeedDatabase), ctx, config)
}

// UpdateAbsence mocks base method.
func (m *MockStore) UpdateAbsence(ctx context.Context, arg sqlc.UpdateAbsenceParams) (sqlc.Absence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAbsence", ctx, arg)
	ret0, _ := ret[0].(sqlc.Absence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAbsence indicates an expected call of UpdateAbsence.
func (mr *MockStoreMockRecorder) UpdateAbsence(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAbsence", reflect.TypeOf((*MockStore)(nil).UpdateAbsence), ctx, arg)
}

// UpdateCompany mocks base method.
func (m *MockStore) UpdateCompany(ctx context.Context, arg sqlc.UpdateCompanyParams) (sqlc.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompany", ctx, arg)
	ret0, _ := ret[0].(sqlc.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockStoreMockRecorder) UpdateCompany(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockStore)(nil).UpdateCompany), ctx, arg)
}

// UpdateEntry mocks base method.
func (m *MockStore) UpdateEntry(ctx context.Context, arg sqlc.UpdateEntryParams) (sqlc.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntry", ctx, arg)
	ret0, _ := ret[0].(sqlc.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntry indicates an expected call of UpdateEntry.
func (mr *MockStoreMockRecorder) UpdateEntry(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntry", reflect.TypeOf((*MockStore)(nil).UpdateEntry), ctx, arg)
}

// UpdateTeam mocks base method.
func (m *MockStore) UpdateTeam(ctx context.Context, arg sqlc.UpdateTeamParams) (sqlc.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", ctx, arg)
	ret0, _ := ret[0].(sqlc.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTeam indicates an expected call of UpdateTeam.
func (mr *MockStoreMockRecorder) UpdateTeam(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockStore)(nil).UpdateTeam), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(ctx context.Context, arg sqlc.UpdateUserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), ctx, arg)
}
