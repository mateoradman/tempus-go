// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: absence.sql

package db

import (
	"context"
	"time"
)

const createAbsence = `-- name: CreateAbsence :one
INSERT INTO absences (
user_id, start_time, end_time, reason, paid, approved_by_id
) VALUES (
$1,
$2,
$3,
$4,
$5,
$6
)
RETURNING id, user_id, start_time, end_time, reason, paid, created_at, updated_at, approved_by_id
`

type CreateAbsenceParams struct {
	UserID       int64      `json:"user_id"`
	StartTime    time.Time  `json:"start_time"`
	EndTime      *time.Time `json:"end_time"`
	Reason       string     `json:"reason"`
	Paid         bool       `json:"paid"`
	ApprovedByID *int64     `json:"approved_by_id"`
}

func (q *Queries) CreateAbsence(ctx context.Context, arg CreateAbsenceParams) (Absence, error) {
	row := q.db.QueryRow(ctx, createAbsence,
		arg.UserID,
		arg.StartTime,
		arg.EndTime,
		arg.Reason,
		arg.Paid,
		arg.ApprovedByID,
	)
	var i Absence
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartTime,
		&i.EndTime,
		&i.Reason,
		&i.Paid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApprovedByID,
	)
	return i, err
}

const deleteAbsence = `-- name: DeleteAbsence :one
DELETE
FROM absences
WHERE id = $1
RETURNING id, user_id, start_time, end_time, reason, paid, created_at, updated_at, approved_by_id
`

func (q *Queries) DeleteAbsence(ctx context.Context, id int64) (Absence, error) {
	row := q.db.QueryRow(ctx, deleteAbsence, id)
	var i Absence
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartTime,
		&i.EndTime,
		&i.Reason,
		&i.Paid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApprovedByID,
	)
	return i, err
}

const getAbsence = `-- name: GetAbsence :one
SELECT id, user_id, start_time, end_time, reason, paid, created_at, updated_at, approved_by_id 
FROM absences
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAbsence(ctx context.Context, id int64) (Absence, error) {
	row := q.db.QueryRow(ctx, getAbsence, id)
	var i Absence
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartTime,
		&i.EndTime,
		&i.Reason,
		&i.Paid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApprovedByID,
	)
	return i, err
}

const listAbsences = `-- name: ListAbsences :many
SELECT id, user_id, start_time, end_time, reason, paid, created_at, updated_at, approved_by_id
FROM absences
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAbsencesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAbsences(ctx context.Context, arg ListAbsencesParams) ([]Absence, error) {
	rows, err := q.db.Query(ctx, listAbsences, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Absence{}
	for rows.Next() {
		var i Absence
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StartTime,
			&i.EndTime,
			&i.Reason,
			&i.Paid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ApprovedByID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserAbsences = `-- name: ListUserAbsences :many
SELECT id, user_id, start_time, end_time, reason, paid, created_at, updated_at, approved_by_id
FROM absences
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUserAbsencesParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserAbsences(ctx context.Context, arg ListUserAbsencesParams) ([]Absence, error) {
	rows, err := q.db.Query(ctx, listUserAbsences, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Absence{}
	for rows.Next() {
		var i Absence
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StartTime,
			&i.EndTime,
			&i.Reason,
			&i.Paid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ApprovedByID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAbsence = `-- name: UpdateAbsence :one
UPDATE absences
SET 
user_id = $2, 
reason = $3, 
paid = $4, 
start_time = $5, 
end_time = $6, 
approved_by_id = $7
WHERE id = $1
RETURNING id, user_id, start_time, end_time, reason, paid, created_at, updated_at, approved_by_id
`

type UpdateAbsenceParams struct {
	ID           int64      `json:"id"`
	UserID       int64      `json:"user_id"`
	Reason       string     `json:"reason"`
	Paid         bool       `json:"paid"`
	StartTime    time.Time  `json:"start_time"`
	EndTime      *time.Time `json:"end_time"`
	ApprovedByID *int64     `json:"approved_by_id"`
}

func (q *Queries) UpdateAbsence(ctx context.Context, arg UpdateAbsenceParams) (Absence, error) {
	row := q.db.QueryRow(ctx, updateAbsence,
		arg.ID,
		arg.UserID,
		arg.Reason,
		arg.Paid,
		arg.StartTime,
		arg.EndTime,
		arg.ApprovedByID,
	)
	var i Absence
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartTime,
		&i.EndTime,
		&i.Reason,
		&i.Paid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApprovedByID,
	)
	return i, err
}
