// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: company.sql

package db

import (
	"context"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (
    name
) VALUES (
    $1
)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateCompany(ctx context.Context, name string) (Company, error) {
	row := q.db.QueryRow(ctx, createCompany, name)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :one
DELETE
FROM companies
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

func (q *Queries) DeleteCompany(ctx context.Context, id int64) (Company, error) {
	row := q.db.QueryRow(ctx, deleteCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompany = `-- name: GetCompany :one
SELECT id, name, created_at, updated_at 
FROM companies
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCompany(ctx context.Context, id int64) (Company, error) {
	row := q.db.QueryRow(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, name, created_at, updated_at
FROM companies
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCompaniesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCompanies(ctx context.Context, arg ListCompaniesParams) ([]Company, error) {
	rows, err := q.db.Query(ctx, listCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Company{}
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompanyEmployees = `-- name: ListCompanyEmployees :many
SELECT id, username, email, name, surname, company_id, password, gender, birth_date, created_at, updated_at, language, country, timezone, manager_id, team_id
FROM users
WHERE users.company_id =
    (SELECT companies.id
    FROM companies
    WHERE companies.id = $1)
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListCompanyEmployeesParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCompanyEmployees(ctx context.Context, arg ListCompanyEmployeesParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listCompanyEmployees, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Name,
			&i.Surname,
			&i.CompanyID,
			&i.Password,
			&i.Gender,
			&i.BirthDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Language,
			&i.Country,
			&i.Timezone,
			&i.ManagerID,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE companies
SET name = $2
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

type UpdateCompanyParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, updateCompany, arg.ID, arg.Name)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
