// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: role.sql

package db

import (
	"context"
)

const getRole = `-- name: GetRole :one
SELECT id, role, name
FROM roles
WHERE role = $1
LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, role int32) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, role)
	var i Role
	err := row.Scan(&i.ID, &i.Role, &i.Name)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, role, name
FROM roles
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Role, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
