// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
username, email, name, surname, company_id, password, gender, birth_date, language, country, timezone, manager_id, team_id
) VALUES (
$1,
$2,
$3,
$4,
$5,
$6,
$7,
$8,
$9,
$10,
$11,
$12,
$13
)
RETURNING id, username, email, name, surname, company_id, password, gender, birth_date, created_at, updated_at, language, country, timezone, manager_id, team_id
`

type CreateUserParams struct {
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Name      string    `json:"name"`
	Surname   string    `json:"surname"`
	CompanyID *int64    `json:"company_id"`
	Password  string    `json:"password"`
	Gender    string    `json:"gender"`
	BirthDate time.Time `json:"birth_date"`
	Language  string    `json:"language"`
	Country   string    `json:"country"`
	Timezone  *string   `json:"timezone"`
	ManagerID *int64    `json:"manager_id"`
	TeamID    *int64    `json:"team_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Name,
		arg.Surname,
		arg.CompanyID,
		arg.Password,
		arg.Gender,
		arg.BirthDate,
		arg.Language,
		arg.Country,
		arg.Timezone,
		arg.ManagerID,
		arg.TeamID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.CompanyID,
		&i.Password,
		&i.Gender,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Language,
		&i.Country,
		&i.Timezone,
		&i.ManagerID,
		&i.TeamID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE
FROM users
WHERE id = $1
RETURNING id, username, email, name, surname, company_id, password, gender, birth_date, created_at, updated_at, language, country, timezone, manager_id, team_id
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.CompanyID,
		&i.Password,
		&i.Gender,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Language,
		&i.Country,
		&i.Timezone,
		&i.ManagerID,
		&i.TeamID,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, name, surname, company_id, password, gender, birth_date, created_at, updated_at, language, country, timezone, manager_id, team_id 
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.CompanyID,
		&i.Password,
		&i.Gender,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Language,
		&i.Country,
		&i.Timezone,
		&i.ManagerID,
		&i.TeamID,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, name, surname, company_id, password, gender, birth_date, created_at, updated_at, language, country, timezone, manager_id, team_id 
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.CompanyID,
		&i.Password,
		&i.Gender,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Language,
		&i.Country,
		&i.Timezone,
		&i.ManagerID,
		&i.TeamID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, name, surname, company_id, password, gender, birth_date, created_at, updated_at, language, country, timezone, manager_id, team_id 
FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.CompanyID,
		&i.Password,
		&i.Gender,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Language,
		&i.Country,
		&i.Timezone,
		&i.ManagerID,
		&i.TeamID,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, name, surname, company_id, password, gender, birth_date, created_at, updated_at, language, country, timezone, manager_id, team_id
FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Name,
			&i.Surname,
			&i.CompanyID,
			&i.Password,
			&i.Gender,
			&i.BirthDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Language,
			&i.Country,
			&i.Timezone,
			&i.ManagerID,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
username = $2,
email = $3,
name = $4,
surname = $5,
company_id = $6,
gender = $7,
birth_date = $8,
language = $9,
country = $10,
timezone = $11,
manager_id = $12,
team_id = $13
WHERE id = $1
RETURNING id, username, email, name, surname, company_id, password, gender, birth_date, created_at, updated_at, language, country, timezone, manager_id, team_id
`

type UpdateUserParams struct {
	ID        int64     `json:"id"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Name      string    `json:"name"`
	Surname   string    `json:"surname"`
	CompanyID *int64    `json:"company_id"`
	Gender    string    `json:"gender"`
	BirthDate time.Time `json:"birth_date"`
	Language  string    `json:"language"`
	Country   string    `json:"country"`
	Timezone  *string   `json:"timezone"`
	ManagerID *int64    `json:"manager_id"`
	TeamID    *int64    `json:"team_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Name,
		arg.Surname,
		arg.CompanyID,
		arg.Gender,
		arg.BirthDate,
		arg.Language,
		arg.Country,
		arg.Timezone,
		arg.ManagerID,
		arg.TeamID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.CompanyID,
		&i.Password,
		&i.Gender,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Language,
		&i.Country,
		&i.Timezone,
		&i.ManagerID,
		&i.TeamID,
	)
	return i, err
}
